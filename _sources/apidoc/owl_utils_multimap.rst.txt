Utils.Multimap
===============================================================================

This document is auto-generated for Owl's APIs.
#12 entries have been extracted.

Github:
`{Signature} <https://github.com/ryanrhymes/owl/tree/master/src/base/misc/owl_utils_multimap.mli>`_ 
`{Implementation} <https://github.com/ryanrhymes/owl/tree/master/src/base/misc/owl_utils_multimap.ml>`_



Type definition
-------------------------------------------------------------------------------



.. code-block:: ocaml

  type key = Ord.t
    

Type of the multimap keys.

.. code-block:: ocaml

  type 'a t
    

Type of a multimap.

Basic functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val empty : 'a t

The empty multimap.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_multimap.ml#L26>`__



.. code-block:: ocaml

  val is_empty : 'a t -> bool

Check whether the multimap is empty.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_multimap.ml#L29>`__



.. code-block:: ocaml

  val mem : key -> 'a t -> bool

``mem k m`` returns true is the multimap ``m`` contains at least one binding
  for ``k``, false otherwise.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_multimap.ml#L32>`__



.. code-block:: ocaml

  val add : key -> 'a -> 'a t -> 'a t

``add k v m`` returns a multimap containing the same bindings as ``m``, plus a
  binding from ``k`` to ``v``. Previous bindings for ``k`` are hidden by the new
  binding (they can be restored by calling ``remove k m``).

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_multimap.ml#L35>`__



.. code-block:: ocaml

  val remove : key -> 'a t -> 'a t

``remove k v m`` returns a multimap with the same bindings as ``m``, except
  for the binding of ``k``: the last value that was bound to it is removed. If
  there is no binding for ``k`` in ``m``, raises `Not_found`.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_multimap.ml#L48>`__



.. code-block:: ocaml

  val find : key -> 'a t -> 'a

``find k m`` returns the last added binding of ``k`` in ``m``, or raises
  ``Not_found`` if there is no such binding.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_multimap.ml#L59>`__



.. code-block:: ocaml

  val max_binding : 'a t -> key * 'a

``max_binding m`` returns the greatest binding in ``m``. Raises ``Not_found``
  if ``m`` is empty.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_multimap.ml#L68>`__



.. code-block:: ocaml

  val find_first_opt : (key -> bool) -> 'a t -> (key * 'a) option

``find_first_opt f m`` returns the first binding ``(k, v)`` such that ``f k``,
  or ``None`` if no such binding exists. The function ``f`` has to be
  nondecreasing. Time complexity is O(log n).

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_multimap.ml#L79>`__



