Graph
===============================================================================

This document is auto-generated for Owl's APIs.
#42 entries have been extracted.

Github:
`{Signature} <https://github.com/ryanrhymes/owl/tree/master/src/base/core/owl_graph.mli>`_ 
`{Implementation} <https://github.com/ryanrhymes/owl/tree/master/src/base/core/owl_graph.ml>`_



Type definition
-------------------------------------------------------------------------------



.. code-block:: ocaml

  type order =
    | BFS
    | DFS 

Order to traverse a graph, BFS or DFS.

.. code-block:: ocaml

  type traversal =
    | PreOrder
    | PostOrder 

Order of the function evaluation.

.. code-block:: ocaml

  type dir =
    | Ancestor
    | Descendant 

Iteration direction, i.e. ancestors or descendants

.. code-block:: ocaml

  type 'a node
    

type definition of a node

Obtaining properties
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val id : 'a node -> int

``id x`` returns the id of node ``x``.

.. code-block:: ocaml

  val name : 'a node -> string

``name x`` returns the name string of node ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L34>`__



.. code-block:: ocaml

  val set_name : 'a node -> string -> unit

``set_name x s`` sets the name string of node ``x`` to ``s``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L36>`__



.. code-block:: ocaml

  val parents : 'a node -> 'a node array

``parents x`` returns the parents of node ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L38>`__



.. code-block:: ocaml

  val set_parents : 'a node -> 'a node array -> unit

``set_parents x parents`` set ``x`` parents to ``parents``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L40>`__



.. code-block:: ocaml

  val children : 'a node -> 'a node array

``children x`` returns the children of node ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L42>`__



.. code-block:: ocaml

  val set_children : 'a node -> 'a node array -> unit

``set_children x children`` sets ``x`` children to ``children``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L44>`__



.. code-block:: ocaml

  val indegree : 'a node -> int

``indegree x`` returns the in-degree of node ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L46>`__



.. code-block:: ocaml

  val outdegree : 'a node -> int

``outdegree x`` returns the out-degree of node ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L48>`__



.. code-block:: ocaml

  val degree : 'a node -> int

``degree x`` returns the total number of links of ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L50>`__



.. code-block:: ocaml

  val attr : 'a node -> 'a

``attr x`` returns the ``attr`` field of node ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L52>`__



.. code-block:: ocaml

  val set_attr : 'a node -> 'a -> unit

``set_attr x`` sets the ``attr`` field of node ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L54>`__



.. code-block:: ocaml

  val num_ancestor : 'a node array -> int

``num_ancestor x`` returns the number of ancestors of ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L263>`__



.. code-block:: ocaml

  val num_descendant : 'a node array -> int

``num_descendant x`` returns the number of descendants of ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L269>`__



.. code-block:: ocaml

  val length : 'a node array -> int

``length x`` returns the total number of ancestors and descendants of ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L275>`__



Manipulation functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val connect : 'a node array -> 'a node array -> unit

``connect parents children`` connects a set of parents to a set of children.
The created links are the Cartesian product of parents and children. In other
words, they are bidirectional links between parents and children.

NOTE: this function does not eliminate any duplicates in the array.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L67>`__



.. code-block:: ocaml

  val connect_descendants : 'a node array -> 'a node array -> unit

``connect_descendants parents children`` connects parents to their children.
This function creates unidirectional links from parents to children. In other
words, this function save ``children`` to ``parent.next`` field.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L75>`__



.. code-block:: ocaml

  val connect_ancestors : 'a node array -> 'a node array -> unit

``connect_ancestors parents children`` connects children to their parents.
This function creates unidirectional links from children to parents. In other
words, this function save ``parents`` to ``child.prev`` field.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L79>`__



.. code-block:: ocaml

  val remove_node : 'a node -> unit

``remove_node x`` removes node ``x`` from the graph by disconnecting itself
from all its parent nodes and child nodes.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L83>`__



.. code-block:: ocaml

  val remove_edge : 'a node -> 'a node -> unit

``remove_edge src dst`` removes a link ``src -> dst`` from the graph. Namely,
the correponding entry of ``dst`` in ``src.next`` and ``src`` in ``dst.prev``
will be removed. Note that it does not remove [dst -> src] if there exists one.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L89>`__



.. code-block:: ocaml

  val replace_child : 'a node -> 'a node -> unit

``replace_child x y`` replaces ``x`` with ``y`` in ``x`` parents. Namely, ``x``
parents now make link to ``y`` rather than ``x`` in ``next`` field.

NOTE: The function does NOT make link from ``y`` to ``x`` parents. Namely,
the ``prev`` field of ``y`` remains intact.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L94>`__



.. code-block:: ocaml

  val replace_parent : 'a node -> 'a node -> unit

``replace_parent x y`` replaces ``x`` with ``y`` in ``x`` children. Namely,
``x`` children now make link to ``y`` rather than ``x`` in ``prev`` field.

NOTE: The function does NOT make link from ``y`` to ``x`` children. Namely,
the ``next`` field of ``y`` remains intact.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L104>`__



.. code-block:: ocaml

  val copy : ?dir:dir -> 'a node array -> 'a node array

``copy ~dir x`` makes a copy of ``x`` and all its ancestors
(if ``dir = Ancestor``) or all its descendants (if ``dir = Descendant``).

Note that this function only makes a copy of the graph structure, ``attr``
fileds of the nodes in the new graph share the same memory with those in the
original graph.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L234>`__



Iterators
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val filter_ancestors : ('a node -> bool) -> 'a node array -> 'a node array

Filter the ancestors of a given node.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L186>`__



.. code-block:: ocaml

  val filter_descendants : ('a node -> bool) -> 'a node array -> 'a node array

Iterate the descendants of a given node.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L192>`__



.. code-block:: ocaml

  val fold_ancestors : ('b -> 'a node -> 'b) -> 'b -> 'a node array -> 'b

Fold the ancestors of a given node.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L198>`__



.. code-block:: ocaml

  val fold_descendants : ('b -> 'a node -> 'b) -> 'b -> 'a node array -> 'b

Fold the descendants of a given node.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L204>`__



.. code-block:: ocaml

  val iter_in_edges : ?order:order -> ('a node -> 'a node -> unit) -> 'a node array -> unit

Iterate all the in-edges of a given node.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L210>`__



.. code-block:: ocaml

  val iter_out_edges : ?order:order -> ('a node -> 'a node -> unit) -> 'a node array -> unit

Iterate all the out-edges of a given node.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L214>`__



.. code-block:: ocaml

  val fold_in_edges : ('b -> 'a node -> 'a node -> 'b) -> 'b -> 'a node array -> 'b

Fold all the in-edges of a given node.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L218>`__



.. code-block:: ocaml

  val fold_out_edges : ('b -> 'a node -> 'a node -> 'b) -> 'b -> 'a node array -> 'b

Fold all the out-edges of a given node.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L224>`__



Helper functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val topo_sort : 'a node array -> 'a node array

Topological sort of a given graph using a DFS order. Assumes that the graph is
acyclic.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L294>`__



.. code-block:: ocaml

  val to_string : bool -> 'a node array -> string

Convert a given node to its string representaion.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_graph.ml#L287>`__



