OpenCL Context
===============================================================================

This document is auto-generated for Owl's APIs.
#22 entries have been extracted.

Github:
`{Signature} <https://github.com/ryanrhymes/owl/tree/master/src/opencl/owl_opencl_context.mli>`_ 
`{Implementation} <https://github.com/ryanrhymes/owl/tree/master/src/opencl/owl_opencl_context.ml>`_



Type definition
-------------------------------------------------------------------------------



.. code-block:: ocaml

  type num =
    | F   of float
    | F32 of (float, float32_elt) Owl_dense_ndarray_generic.t
    | F64 of (float, float64_elt) Owl_dense_ndarray_generic.t
    

Type of supported number types in the `param` of `eval` function.

.. code-block:: ocaml

  type t =
    { mutable device : cl_device_id array
    ; mutable context : cl_context
    ; mutable program : cl_program
    ; mutable progsrc : string array
    ; mutable command_queue : (cl_device_id, cl_command_queue) Hashtbl.t
    }
    

Type of context. Note this is different from OpenCL's context object.

.. code-block:: ocaml

  val default : t

Default context, with all GPU devices included and pre-compiled core kernels.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L111>`__



Query platform
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val platforms : unit -> cl_platform_id array

List all the platforms on this computer.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L28>`__



.. code-block:: ocaml

  val devices : unit -> cl_device_id array

List all the devices (including CPUs, GPUs, accelerators, etc.) on

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L30>`__



.. code-block:: ocaml

  val cpu_devices : unit -> cl_device_id array

List all the CPU devices on this computer.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L38>`__



.. code-block:: ocaml

  val gpu_devices : unit -> cl_device_id array

List all the GPU devices on this computer.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L46>`__



.. code-block:: ocaml

  val accelerators : unit -> cl_device_id array

List all the accelerators on this computer.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L54>`__



Manipulate context
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val create : cl_device_id array -> string array -> t

Create a context with the given devices. The corresponding command queues are created and core kernels are compiled.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L88>`__



.. code-block:: ocaml

  val get_opencl_ctx : t -> cl_context

Return the OpenCL context object. Note this is different from Owl's context.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L103>`__



.. code-block:: ocaml

  val get_program : t -> cl_program

Return the program associated with the context.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L105>`__



.. code-block:: ocaml

  val get_dev : t -> int -> cl_device_id

Return the ith device object associated with the context.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L107>`__



.. code-block:: ocaml

  val get_cmdq : t -> cl_device_id -> cl_command_queue

Return the corresponding command queue object of the given device object and its associated with the context.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L109>`__



Manipulate kernels
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val kernels : t -> string array

List all the installed kernels in the given context.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L62>`__



.. code-block:: ocaml

  val add_kernels : t -> string array -> unit

``add_kernels ctx code`` adds list of kernels to the existing context.
``src`` contains the source code of all the kernels. Note this function call
also causes all the existing kernels in the current context to be recompiled
with the passed in ones.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L67>`__



.. code-block:: ocaml

  val make_kernel : t -> string -> cl_kernel

``make_kernel ctx fun_name`` makes a kernel object from passed in context with the given function name.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L75>`__



.. code-block:: ocaml

  val ba_kernel : ('a, 'b) kind -> string -> cl_program -> cl_kernel

This function is similar to ``make_kernel`` but specifically for making Bigarray function.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/opencl/owl_opencl_context.ml#L77>`__



Evaluate kernels
-------------------------------------------------------------------------------



