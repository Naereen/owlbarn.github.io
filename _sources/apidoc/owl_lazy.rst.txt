Lazy Functor
===============================================================================

This document is auto-generated for Owl's APIs.
#186 entries have been extracted.

Github:
`{Signature} <https://github.com/ryanrhymes/owl/tree/master/src/base/core/owl_lazy.mli>`_ 
`{Implementation} <https://github.com/ryanrhymes/owl/tree/master/src/base/core/owl_lazy.ml>`_



Type definition
-------------------------------------------------------------------------------



.. code-block:: ocaml

  type arr
    

TODO

.. code-block:: ocaml

  type elt
    

TODO

.. code-block:: ocaml

  type value
    

TODO

.. code-block:: ocaml

  type attr
    

TODO

.. code-block:: ocaml

  type graph
    

TODO

Type conversion functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val arr_to_value : A.arr -> value

TODO

.. code-block:: ocaml

  val value_to_arr : value -> A.arr

TODO

.. code-block:: ocaml

  val elt_to_value : A.elt -> value

TODO

.. code-block:: ocaml

  val value_to_elt : value -> A.elt

TODO

.. code-block:: ocaml

  val value_to_float : value -> float

TODO

.. code-block:: ocaml

  val node_to_arr : attr node -> arr

TODO

.. code-block:: ocaml

  val arr_to_node : arr -> attr node

TODO

.. code-block:: ocaml

  val node_to_elt : attr node -> elt

TODO

.. code-block:: ocaml

  val elt_to_node : elt -> attr node

TODO

.. code-block:: ocaml

  val pack_arr : A.arr -> arr

TODO

.. code-block:: ocaml

  val unpack_arr : arr -> A.arr

TODO

.. code-block:: ocaml

  val pack_elt : A.elt -> elt

TODO

.. code-block:: ocaml

  val unpack_elt : elt -> A.elt

TODO

.. code-block:: ocaml

  val float_to_elt : float -> elt

TODO

.. code-block:: ocaml

  val elt_to_float : elt -> float

TODO

Utility functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val graph_to_dot : graph -> string

TODO

.. code-block:: ocaml

  val graph_to_trace : graph -> string

TODO

Create variables
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val var_arr : ?shape:int array -> string -> arr

TODO

.. code-block:: ocaml

  val var_elt : string -> elt

TODO

.. code-block:: ocaml

  val const_arr : string -> A.arr -> arr

TODO

.. code-block:: ocaml

  val const_elt : string -> A.elt -> elt

TODO

.. code-block:: ocaml

  val assign_arr : arr -> A.arr -> unit

TODO

.. code-block:: ocaml

  val assign_elt : elt -> A.elt -> unit

TODO

.. code-block:: ocaml

  val unsafe_assign_arr : arr -> A.arr -> unit

TODO

Maths funcitons
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val noop : arr -> arr

TODO

.. code-block:: ocaml

  val empty : int array -> arr

TODO

.. code-block:: ocaml

  val zeros : int array -> arr

TODO

.. code-block:: ocaml

  val ones : int array -> arr

TODO

.. code-block:: ocaml

  val create : int array -> elt -> arr

TODO

.. code-block:: ocaml

  val sequential : ?a:elt -> ?step:elt -> int array -> arr

TODO

.. code-block:: ocaml

  val uniform : ?a:elt -> ?b:elt -> int array -> arr

TODO

.. code-block:: ocaml

  val gaussian : ?mu:elt -> ?sigma:elt -> int array -> arr

TODO

.. code-block:: ocaml

  val bernoulli : ?p:elt -> int array -> arr

TODO

.. code-block:: ocaml

  val init : int array -> (int -> elt) -> arr

TODO

.. code-block:: ocaml

  val shape : arr -> int array

TODO

.. code-block:: ocaml

  val numel : arr -> int

TODO

.. code-block:: ocaml

  val get : arr -> int array -> elt

TODO

.. code-block:: ocaml

  val set : arr -> int array -> elt -> unit

TODO

.. code-block:: ocaml

  val get_slice : int list list -> arr -> arr

TODO

.. code-block:: ocaml

  val set_slice : int list list -> arr -> arr -> unit

TODO

.. code-block:: ocaml

  val copy : arr -> arr

TODO

.. code-block:: ocaml

  val reset : arr -> unit

TODO

.. code-block:: ocaml

  val reshape : arr -> int array -> arr

TODO

.. code-block:: ocaml

  val reverse : arr -> arr

TODO

.. code-block:: ocaml

  val tile : arr -> int array -> arr

TODO

.. code-block:: ocaml

  val repeat : arr -> int array -> arr

TODO

.. code-block:: ocaml

  val concatenate : ?axis:int -> arr array -> arr

TODO

.. code-block:: ocaml

  val split : ?axis:int -> int array -> arr -> arr array

TODO

.. code-block:: ocaml

  val draw : ?axis:int -> arr -> int -> arr * 'a array

TODO

.. code-block:: ocaml

  val map : (elt -> elt) -> arr -> arr

TODO

.. code-block:: ocaml

  val fold : ?axis:int -> (elt -> elt -> elt) -> elt -> arr -> arr

TODO

.. code-block:: ocaml

  val scan : ?axis:int -> (elt -> elt -> elt) -> arr -> arr

TODO

.. code-block:: ocaml

  val one_hot : int -> arr -> arr

TODO

.. code-block:: ocaml

  val lazy_print : ?max_row:int -> ?max_col:int -> ?header:bool -> ?fmt:(A.elt -> string) -> arr -> arr

TODO

.. code-block:: ocaml

  val print : ?max_row:'a -> ?max_col:'b -> ?header:'c -> ?fmt:'d -> 'e -> unit

TODO

.. code-block:: ocaml

  val abs : arr -> arr

TODO

.. code-block:: ocaml

  val neg : arr -> arr

TODO

.. code-block:: ocaml

  val floor : arr -> arr

TODO

.. code-block:: ocaml

  val ceil : arr -> arr

TODO

.. code-block:: ocaml

  val round : arr -> arr

TODO

.. code-block:: ocaml

  val sqr : arr -> arr

TODO

.. code-block:: ocaml

  val sqrt : arr -> arr

TODO

.. code-block:: ocaml

  val log : arr -> arr

TODO

.. code-block:: ocaml

  val log2 : arr -> arr

TODO

.. code-block:: ocaml

  val log10 : arr -> arr

TODO

.. code-block:: ocaml

  val exp : arr -> arr

TODO

.. code-block:: ocaml

  val sin : arr -> arr

TODO

.. code-block:: ocaml

  val cos : arr -> arr

TODO

.. code-block:: ocaml

  val tan : arr -> arr

TODO

.. code-block:: ocaml

  val sinh : arr -> arr

TODO

.. code-block:: ocaml

  val cosh : arr -> arr

TODO

.. code-block:: ocaml

  val tanh : arr -> arr

TODO

.. code-block:: ocaml

  val asin : arr -> arr

TODO

.. code-block:: ocaml

  val acos : arr -> arr

TODO

.. code-block:: ocaml

  val atan : arr -> arr

TODO

.. code-block:: ocaml

  val asinh : arr -> arr

TODO

.. code-block:: ocaml

  val acosh : arr -> arr

TODO

.. code-block:: ocaml

  val atanh : arr -> arr

TODO

.. code-block:: ocaml

  val min : ?axis:int -> arr -> arr

TODO

.. code-block:: ocaml

  val max : ?axis:int -> arr -> arr

TODO

.. code-block:: ocaml

  val sum : ?axis:int -> arr -> arr

TODO

.. code-block:: ocaml

  val sum_reduce : ?axis:int array -> arr -> arr

TODO

.. code-block:: ocaml

  val signum : arr -> arr

TODO

.. code-block:: ocaml

  val sigmoid : arr -> arr

TODO

.. code-block:: ocaml

  val relu : arr -> arr

TODO

.. code-block:: ocaml

  val min' : arr -> elt

TODO

.. code-block:: ocaml

  val max' : arr -> elt

TODO

.. code-block:: ocaml

  val sum' : arr -> elt

TODO

.. code-block:: ocaml

  val l1norm' : arr -> elt

TODO

.. code-block:: ocaml

  val l2norm' : arr -> elt

TODO

.. code-block:: ocaml

  val l2norm_sqr' : arr -> elt

TODO

.. code-block:: ocaml

  val clip_by_value : ?amin:elt -> ?amax:elt -> arr -> arr

TODO

.. code-block:: ocaml

  val clip_by_l2norm : elt -> arr -> arr

TODO

.. code-block:: ocaml

  val pow : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val scalar_pow : elt -> arr -> arr

TODO

.. code-block:: ocaml

  val pow_scalar : arr -> elt -> arr

TODO

.. code-block:: ocaml

  val atan2 : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val scalar_atan2 : elt -> arr -> arr

TODO

.. code-block:: ocaml

  val atan2_scalar : arr -> elt -> arr

TODO

.. code-block:: ocaml

  val hypot : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val min2 : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val max2 : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val add : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val sub : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val mul : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val div : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val add_scalar : arr -> elt -> arr

TODO

.. code-block:: ocaml

  val sub_scalar : arr -> elt -> arr

TODO

.. code-block:: ocaml

  val mul_scalar : arr -> elt -> arr

TODO

.. code-block:: ocaml

  val div_scalar : arr -> elt -> arr

TODO

.. code-block:: ocaml

  val scalar_add : elt -> arr -> arr

TODO

.. code-block:: ocaml

  val scalar_sub : elt -> arr -> arr

TODO

.. code-block:: ocaml

  val scalar_mul : elt -> arr -> arr

TODO

.. code-block:: ocaml

  val scalar_div : elt -> arr -> arr

TODO

.. code-block:: ocaml

  val fma : arr -> arr -> arr -> arr

TODO

.. code-block:: ocaml

  val elt_equal : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val elt_not_equal : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val elt_less : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val elt_greater : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val elt_less_equal : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val elt_greater_equal : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val elt_equal_scalar : arr -> elt -> arr

TODO

.. code-block:: ocaml

  val elt_not_equal_scalar : arr -> elt -> arr

TODO

.. code-block:: ocaml

  val elt_less_scalar : arr -> elt -> arr

TODO

.. code-block:: ocaml

  val elt_greater_scalar : arr -> elt -> arr

TODO

.. code-block:: ocaml

  val elt_less_equal_scalar : arr -> elt -> arr

TODO

.. code-block:: ocaml

  val elt_greater_equal_scalar : arr -> elt -> arr

TODO

.. code-block:: ocaml

  val conv1d : ?padding:padding -> arr -> arr -> int array -> arr

TODO

.. code-block:: ocaml

  val conv2d : ?padding:padding -> arr -> arr -> int array -> arr

TODO

.. code-block:: ocaml

  val conv3d : ?padding:padding -> arr -> arr -> int array -> arr

TODO

.. code-block:: ocaml

  val transpose_conv2d : ?padding:padding -> arr -> arr -> int array -> arr

TODO

.. code-block:: ocaml

  val max_pool1d : ?padding:padding -> arr -> int array -> int array -> arr

TODO

.. code-block:: ocaml

  val max_pool2d : ?padding:padding -> arr -> int array -> int array -> arr

TODO

.. code-block:: ocaml

  val max_pool3d : ?padding:padding -> arr -> int array -> int array -> arr

TODO

.. code-block:: ocaml

  val avg_pool1d : ?padding:padding -> arr -> int array -> int array -> arr

TODO

.. code-block:: ocaml

  val avg_pool2d : ?padding:padding -> arr -> int array -> int array -> arr

TODO

.. code-block:: ocaml

  val avg_pool3d : ?padding:padding -> arr -> int array -> int array -> arr

TODO

.. code-block:: ocaml

  val conv1d_backward_input : arr -> arr -> int array -> arr -> arr

TODO

.. code-block:: ocaml

  val conv1d_backward_kernel : arr -> arr -> int array -> arr -> arr

TODO

.. code-block:: ocaml

  val conv2d_backward_input : arr -> arr -> int array -> arr -> arr

TODO

.. code-block:: ocaml

  val conv2d_backward_kernel : arr -> arr -> int array -> arr -> arr

TODO

.. code-block:: ocaml

  val conv3d_backward_input : arr -> arr -> int array -> arr -> arr

TODO

.. code-block:: ocaml

  val conv3d_backward_kernel : arr -> arr -> int array -> arr -> arr

TODO

.. code-block:: ocaml

  val transpose_conv2d_backward_input : arr -> arr -> int array -> arr -> arr

TODO

.. code-block:: ocaml

  val transpose_conv2d_backward_kernel : arr -> arr -> int array -> arr -> arr

TODO

.. code-block:: ocaml

  val max_pool1d_backward : padding -> arr -> int array -> int array -> arr -> arr

TODO

.. code-block:: ocaml

  val max_pool2d_backward : padding -> arr -> int array -> int array -> arr -> arr

TODO

.. code-block:: ocaml

  val max_pool3d_backward : padding -> arr -> int array -> int array -> arr -> arr

TODO

.. code-block:: ocaml

  val avg_pool1d_backward : padding -> arr -> int array -> int array -> arr -> arr

TODO

.. code-block:: ocaml

  val avg_pool2d_backward : padding -> arr -> int array -> int array -> arr -> arr

TODO

.. code-block:: ocaml

  val avg_pool3d_backward : padding -> arr -> int array -> int array -> arr -> arr

TODO

.. code-block:: ocaml

  val row_num : arr -> int

TODO

.. code-block:: ocaml

  val col_num : arr -> int

TODO

.. code-block:: ocaml

  val row : arr -> 'a -> arr

TODO

.. code-block:: ocaml

  val rows : arr -> int array -> arr

TODO

.. code-block:: ocaml

  val copy_row_to : arr -> 'a -> 'b -> unit

TODO

.. code-block:: ocaml

  val copy_col_to : arr -> 'a -> 'b -> unit

TODO

.. code-block:: ocaml

  val inv : arr -> arr

TODO

.. code-block:: ocaml

  val trace : arr -> elt

TODO

.. code-block:: ocaml

  val dot : arr -> arr -> arr

TODO

.. code-block:: ocaml

  val transpose : ?axis:int array -> arr -> arr

TODO

.. code-block:: ocaml

  val to_rows : arr -> 'a array

TODO

.. code-block:: ocaml

  val of_rows : arr array -> arr

TODO

.. code-block:: ocaml

  val of_array : elt array -> int array -> arr

TODO

.. code-block:: ocaml

  val of_arrays : elt array array -> arr

TODO

Evaluation functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val make_graph : input:attr node array -> output:attr node array -> string -> graph

TODO

.. code-block:: ocaml

  val get_inputs : graph -> attr node array

TODO

.. code-block:: ocaml

  val get_outputs : graph -> attr node array

TODO

.. code-block:: ocaml

  val make_iopair : graph -> attr node array -> attr node array -> unit

TODO

.. code-block:: ocaml

  val update_iopair : graph -> unit

TODO

.. code-block:: ocaml

  val init_inputs : (attr node -> value) -> graph -> unit

TODO

.. code-block:: ocaml

  val optimise : graph -> unit

TODO

.. code-block:: ocaml

  val eval_elt : elt array -> unit

TODO

.. code-block:: ocaml

  val eval_arr : arr array -> unit

TODO

.. code-block:: ocaml

  val eval_graph : graph -> unit

TODO

