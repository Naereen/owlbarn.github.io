Utils.Array
===============================================================================

This document is auto-generated for Owl's APIs.
#77 entries have been extracted.

Github:
`{Signature} <https://github.com/ryanrhymes/owl/tree/master/src/base/misc/owl_utils_array.mli>`_ 
`{Implementation} <https://github.com/ryanrhymes/owl/tree/master/src/base/misc/owl_utils_array.ml>`_



Basic functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val length : 'a array -> int

Refer to OCaml native array.

.. code-block:: ocaml

  val get : 'a array -> int -> 'a

Refer to OCaml native array.

.. code-block:: ocaml

  val set : 'a array -> int -> 'a -> unit

Refer to OCaml native array.

.. code-block:: ocaml

  val make : int -> 'a -> 'a array

Refer to OCaml native array.

.. code-block:: ocaml

  val create_float : int -> float array

Refer to OCaml native array.

.. code-block:: ocaml

  val init : int -> (int -> 'a) -> 'a array

Refer to OCaml native array.

.. code-block:: ocaml

  val make_matrix : int -> int -> 'a -> 'a array array

Refer to OCaml native array.

.. code-block:: ocaml

  val append : 'a array -> 'a array -> 'a array

Refer to OCaml native array.

.. code-block:: ocaml

  val concat : 'a array list -> 'a array

Refer to OCaml native array.

.. code-block:: ocaml

  val sub : 'a array -> int -> int -> 'a array

Refer to OCaml native array.

.. code-block:: ocaml

  val copy : 'a array -> 'a array

Refer to OCaml native array.

.. code-block:: ocaml

  val fill : 'a array -> int -> int -> 'a -> unit

Refer to OCaml native array.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L478>`__



.. code-block:: ocaml

  val blit : 'a array -> int -> 'a array -> int -> int -> unit

Refer to OCaml native array.

.. code-block:: ocaml

  val to_list : 'a array -> 'a list

Refer to OCaml native array.

.. code-block:: ocaml

  val of_list : 'a list -> 'a array

Refer to OCaml native array.

.. code-block:: ocaml

  val iter : ('a -> unit) -> 'a array -> unit

Refer to OCaml native array.

.. code-block:: ocaml

  val iteri : (int -> 'a -> unit) -> 'a array -> unit

Refer to OCaml native array.

.. code-block:: ocaml

  val fold_left : ('a -> 'b -> 'a) -> 'a -> 'b array -> 'a

Refer to OCaml native array.

.. code-block:: ocaml

  val fold_right : ('b -> 'a -> 'a) -> 'b array -> 'a -> 'a

Refer to OCaml native array.

.. code-block:: ocaml

  val map2 : ('a -> 'b -> 'c) -> 'a array -> 'b array -> 'c array

Refer to OCaml native array.

.. code-block:: ocaml

  val for_all : ('a -> bool) -> 'a array -> bool

Refer to OCaml native array.

.. code-block:: ocaml

  val exists : ('a -> bool) -> 'a array -> bool

Refer to OCaml native array.

.. code-block:: ocaml

  val mem : 'a -> 'a array -> bool

Refer to OCaml native array.

.. code-block:: ocaml

  val memq : 'a -> 'a array -> bool

Refer to OCaml native array.

.. code-block:: ocaml

  val min_i : ?cmp:('a -> 'a -> int) -> 'a array -> int

``min_i x`` returns the index of minimum value in array ``x``. If ``cmp`` is
not passed in then ``Stdlib.compare`` is used as default value.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L497>`__



.. code-block:: ocaml

  val max_i : ?cmp:('a -> 'a -> int) -> 'a array -> int

``max_i x`` returns the index of minimum value in array ``x``. If ``cmp`` is
not passed in then ``Stdlib.compare`` is used as default value.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L511>`__



.. code-block:: ocaml

  val argsort : ?cmp:('a -> 'a -> int) -> 'a array -> int array

``argsort cmp x`` sorts ``x`` according to the compare function ``cmp`` and
returns the corresponding indices.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L489>`__



.. code-block:: ocaml

  val sort : ('a -> 'a -> int) -> 'a array -> unit

Refer to OCaml native array.

.. code-block:: ocaml

  val stable_sort : ('a -> 'a -> int) -> 'a array -> unit

Refer to OCaml native array.

.. code-block:: ocaml

  val fast_sort : ('a -> 'a -> int) -> 'a array -> unit

Refer to OCaml native array.

.. code-block:: ocaml

  val sort_fill : ?min:int -> ?max:int -> ?fill:int -> int array -> int array

``sort_fill ~min ~max ~fill x`` first sorts ``x``, then expands it to an array
of length ``max - min + 1``, and fills the holes with ``fill``. E.g.,
``sort_fill ~min:1 ~max:5 ~fill:0 [|4;2|] x`` returns a new array as follows:
``[|1; 0; 2; 0; 4; 5|]``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L464>`__



.. code-block:: ocaml

  val unsafe_get : 'a array -> int -> 'a

Refer to OCaml native array.

.. code-block:: ocaml

  val unsafe_set : 'a array -> int -> 'a -> unit

Refer to OCaml native array.

Extended functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val ( @ ) : 'a array -> 'a array -> 'a array

Operator of array concatenation.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L11>`__



.. code-block:: ocaml

  val get_slice : int array -> 'a array -> 'a array

``get_slice slice x`` returns a copy of slice of ``x`` defined by ``slice``.
The ``slice`` definition must have ``[|start;stop;step|]`` format. The value
of start, stop, and step can be negative, and the boundary is inclusive.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L330>`__



.. code-block:: ocaml

  val set_slice : int array -> 'a array -> 'a array -> unit

``set_slice slice x y`` sets the elements in ``x`` to the corresponding value
of the elements in ``y`` based on the slice definition ``slice``. Please refer
to ``get_slice`` function for the information on the format of slice definition.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L347>`__



.. code-block:: ocaml

  val flatten : 'a array array -> 'a array

Flatten an array array into an array.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L32>`__



.. code-block:: ocaml

  val set_n : 'a array -> int array -> 'a -> unit

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L20>`__



.. code-block:: ocaml

  val range : int -> int -> int array

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L23>`__



.. code-block:: ocaml

  val count : 'a array -> 'a -> int

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L39>`__



.. code-block:: ocaml

  val insert : 'a array -> 'a array -> int -> 'a array

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L46>`__



.. code-block:: ocaml

  val unique : 'a array -> 'a array

``unique x`` removes the duplicates in the array ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L440>`__



.. code-block:: ocaml

  val merge : 'a array -> 'a array -> 'a array

``merge x y`` merges two arrays and removes the duplicates.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L451>`__



.. code-block:: ocaml

  val remove : 'a array -> int -> 'a array

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L59>`__



.. code-block:: ocaml

  val replace : int -> int -> 'a array -> 'a array -> 'a array

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L74>`__



.. code-block:: ocaml

  val reverse : 'a array -> unit

``reverse x`` reverse the elements in ``x`` in place.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L453>`__



.. code-block:: ocaml

  val mapi : (int -> 'a -> 'b) -> 'a array -> 'b array

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L119>`__



.. code-block:: ocaml

  val map : ('a -> 'b) -> 'a array -> 'b array

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L129>`__



.. code-block:: ocaml

  val iter2i : (int -> 'a -> 'b -> unit) -> 'a array -> 'b array -> unit

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L140>`__



.. code-block:: ocaml

  val iter2 : ('a -> 'b -> unit) -> 'a array -> 'b array -> unit

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L133>`__



.. code-block:: ocaml

  val iter3i : (int -> 'a -> 'b -> 'c -> unit) -> 'a array -> 'b array -> 'c array -> unit

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L154>`__



.. code-block:: ocaml

  val iter3 : ('a -> 'b -> 'c -> unit) -> 'a array -> 'b array -> 'c array -> unit

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L147>`__



.. code-block:: ocaml

  val map2i : (int -> 'a -> 'b -> 'c) -> 'a array -> 'b array -> 'c array

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L174>`__



.. code-block:: ocaml

  val map3i : (int -> 'a -> 'b -> 'c -> 'd) -> 'a array -> 'b array -> 'c array -> 'd array

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L242>`__



.. code-block:: ocaml

  val map3 : ('a -> 'b -> 'c -> 'd) -> 'a array -> 'b array -> 'c array -> 'd array

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L250>`__



.. code-block:: ocaml

  val filteri_v : (int -> 'a -> bool * 'b) -> 'a array -> 'b array

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L93>`__



.. code-block:: ocaml

  val filter_v : ('a -> bool * 'b) -> 'a array -> 'b array

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L104>`__



.. code-block:: ocaml

  val filteri : (int -> 'a -> bool) -> 'a array -> 'a array

``filteri f x`` filters out the elements in ``x`` according to predicate ``f``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L107>`__



.. code-block:: ocaml

  val filter : ('a -> bool) -> 'a array -> 'a array

``filter f x`` filters out the elements in ``x`` according to predicate ``f``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L117>`__



.. code-block:: ocaml

  val filter2i : (int -> 'a -> 'b -> bool) -> 'a array -> 'b array -> ('a * 'b) array

``filter2i f x y`` filters the elements in ``x`` and ``y`` using passed in
function ``f``. Both arrays must have same length.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L195>`__



.. code-block:: ocaml

  val filter2 : ('a -> 'b -> bool) -> 'a array -> 'b array -> ('a * 'b) array

``filter2 f x y`` is similar to ``filter2i`` but without passing index of
the elements to function ``f``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L208>`__



.. code-block:: ocaml

  val filter2i_i : (int -> 'a -> 'b -> bool) -> 'a array -> 'b array -> int array

``filter2i_i f x y`` filters the elements in ``x`` and ``y`` using passed in
function ``f``. Both arrays must have same length. Note that the indices of
those satisfying the predicate ``f`` are returned in an array.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L210>`__



.. code-block:: ocaml

  val filter2_i : ('a -> 'b -> bool) -> 'a array -> 'b array -> int array

``filter2_i f x y`` is similar to ``filter2i_i`` but without passing index of
the elements to function ``f``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L223>`__



.. code-block:: ocaml

  val filter2_split : ('a -> 'b -> bool) -> 'a array -> 'b array -> 'a array * 'b array

``filter2_split f x y`` is similar to ``filter2 f x y``, but the returned
results are two separated arrays rather than merging into one tuple array.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L225>`__



.. code-block:: ocaml

  val resize : ?head:bool -> 'a -> int -> 'a array -> 'a array

``resize ~head v n x`` resizes ``x`` of length ``m`` to length ``n``. If
``m <= n``, a copy of ``x`` subarray is returned. If ``m > n``, then ``x`` is
extended, the extra space is filled with value ``v``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L230>`__



.. code-block:: ocaml

  val fold2 : ('a -> 'b -> 'c -> 'a) -> 'a -> 'b array -> 'c array -> 'a

``fold2 a x y`` folds both ``x`` and ``y`` from left with starting value ``a``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L263>`__



.. code-block:: ocaml

  val pad : [ `Left | `Right ] -> 'a -> int -> 'a array -> 'a array

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L270>`__



.. code-block:: ocaml

  val align : [ `Left | `Right ] -> 'a -> 'a array -> 'a array -> 'a array * 'a array

``align side v x y`` aligns two arrays ``x`` and ``y`` along the specified side
with value ``v``. The copies of two arrays are returned.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L281>`__



.. code-block:: ocaml

  val greater_eqaul : 'a array -> 'a array -> bool

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L303>`__



.. code-block:: ocaml

  val swap : 'a array -> int -> int -> unit

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L318>`__



.. code-block:: ocaml

  val permute : int array -> 'a array -> 'a array

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L325>`__



.. code-block:: ocaml

  val of_tuples : ('a * 'a) array -> 'a array

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L363>`__



.. code-block:: ocaml

  val balance_last : float -> float array -> float array

``balance_last mass x`` performs the following function. Let ``l`` be the
length of ``x``, if ``i < l - 1``, then ``x.(i) = x.(i)``, otherwise
``x.(l - 1) = mass - \sum_{i < l - 1} x.(i)``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L383>`__



.. code-block:: ocaml

  val index_of : 'a array -> 'a -> int

``index_of x a`` returns the index of first occurrence of ``a`` in ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L397>`__



.. code-block:: ocaml

  val bsearch : cmp:('a -> 'a -> int) -> 'a -> 'a array -> int

Binary search. ``bsearch cmp x a`` returns the index of the largest value
in the sorted array ``a`` less than or equal to ``x``, according to the
comparison function ``cmp``. If ``x`` is smaller than all elements, returns -1.
The function raises an exception if ``a`` is empty.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_array.ml#L417>`__



