Dataframe
===============================================================================

This document is auto-generated for Owl's APIs.
#85 entries have been extracted.

Github:
`{Signature} <https://github.com/ryanrhymes/owl/tree/master/src/base/misc/owl_dataframe.mli>`_ 
`{Implementation} <https://github.com/ryanrhymes/owl/tree/master/src/base/misc/owl_dataframe.ml>`_



Type definition
-------------------------------------------------------------------------------



.. code-block:: ocaml

  type t
    

Abstract dataframe type.

.. code-block:: ocaml

  type series =
    | Bool_Series   of bool array
    | Int_Series    of int array
    | Float_Series  of float array
    | String_Series of string array
    | Any_Series
    

Abstract series type.

.. code-block:: ocaml

  type elt =
    | Bool   of bool
    | Int    of int
    | Float  of float
    | String of string
    | Any
    

Type of the elements in a series.

Pakcking & unpacking element
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val pack_bool : bool -> elt

Pack the boolean value to ``elt`` type.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L49>`__



.. code-block:: ocaml

  val pack_int : int -> elt

Pack the int value to ``elt`` type.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L51>`__



.. code-block:: ocaml

  val pack_float : float -> elt

Pack the float value to ``elt`` type.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L53>`__



.. code-block:: ocaml

  val pack_string : string -> elt

Pack the string value to ``elt`` type.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L55>`__



.. code-block:: ocaml

  val unpack_bool : elt -> bool

Unpack ``elt`` type to boolean value.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L33>`__



.. code-block:: ocaml

  val unpack_int : elt -> int

Unpack ``elt`` type to int value.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L35>`__



.. code-block:: ocaml

  val unpack_float : elt -> float

Unpack ``elt`` type to float value.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L37>`__



.. code-block:: ocaml

  val unpack_string : elt -> string

Unpack ``elt`` type to string value.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L39>`__



Pakcking & unpacking series
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val pack_bool_series : bool array -> series

Pack boolean array to ``series`` type.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L57>`__



.. code-block:: ocaml

  val pack_int_series : int array -> series

Pack int array to ``series`` type.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L59>`__



.. code-block:: ocaml

  val pack_float_series : float array -> series

Pack float array to ``series`` type.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L61>`__



.. code-block:: ocaml

  val pack_string_series : string array -> series

Pack string array to ``series`` type.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L63>`__



.. code-block:: ocaml

  val unpack_bool_series : series -> bool array

Unpack ``series`` type to boolean array.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L41>`__



.. code-block:: ocaml

  val unpack_int_series : series -> int array

Unpack ``series`` type to int array.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L43>`__



.. code-block:: ocaml

  val unpack_float_series : series -> float array

Unpack ``series`` type to float array.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L45>`__



.. code-block:: ocaml

  val unpack_string_series : series -> string array

Unpack ``series`` type to string array.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L47>`__



Obtain properties
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val row_num : t -> int

``row_num x`` returns the number of rows in ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L244>`__



.. code-block:: ocaml

  val col_num : t -> int

``col_num x`` returns the number of columns in ``x``.

.. code-block:: ocaml

  val shape : t -> int * int

``shape x`` returns the shape of ``x``, i.e. ``(row numnber, column number)``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L247>`__



.. code-block:: ocaml

  val numel : t -> int

``numel x`` returns the number of elements in ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L250>`__



.. code-block:: ocaml

  val types : t -> string array

``types x`` returns the string representation of column types.

.. code-block:: ocaml

  val get_heads : t -> string array

``get_heads x`` returns the column names of ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L282>`__



.. code-block:: ocaml

  val set_heads : t -> string array -> unit

``set_heads x head_names`` sets ``head_names`` as the column names of ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L288>`__



.. code-block:: ocaml

  val id_to_head : t -> int -> string

``id_to_head head_name`` converts head name to its corresponding column index.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L341>`__



.. code-block:: ocaml

  val head_to_id : t -> string -> int

``head_to_id i`` converts column index ``i`` to its corresponding head name.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L344>`__



Basic get and set functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val get : t -> int -> int -> elt

``get x i j`` returns the element at ``(i,j)``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L378>`__



.. code-block:: ocaml

  val set : t -> int -> int -> elt -> unit

``set x i j v`` sets the value of element at ``(i,j)`` to ``v``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L387>`__



.. code-block:: ocaml

  val get_by_name : t -> int -> string -> elt

``get_by_name x i head_name`` is similar to ``get`` but uses column name.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L396>`__



.. code-block:: ocaml

  val set_by_name : t -> int -> string -> elt -> unit

``set_by_name x i head_name`` is similar to ``set`` but uses column name.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L400>`__



.. code-block:: ocaml

  val get_row : t -> int -> elt array

``get_row x i`` returns the ith row in ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L347>`__



.. code-block:: ocaml

  val get_col : t -> int -> series

``get_col x i`` returns the ith column in ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L350>`__



.. code-block:: ocaml

  val get_rows : t -> int array -> elt array array

``get_rows x a`` returns the rows of ``x`` specified in ``a``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L359>`__



.. code-block:: ocaml

  val get_cols : t -> int array -> series array

``get_cols x a`` returns the columns of ``x`` specified in ``a``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L362>`__



.. code-block:: ocaml

  val get_col_by_name : t -> string -> series

``get_col_by_name`` is similar to ``get_col`` but uses column name.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L370>`__



.. code-block:: ocaml

  val get_cols_by_name : t -> string array -> series array

``get_cols_by_name`` is similar to ``get_cols`` but uses column names.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L375>`__



.. code-block:: ocaml

  val get_slice : int list list -> t -> t

``get_slice s x`` returns a slice of ``x`` defined by ``s``. For more details,
please refer to :doc:`owl_dense_ndarray_generic`.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L545>`__



.. code-block:: ocaml

  val get_slice_by_name : int list * string list -> t -> t

``get_slice_by_name`` is similar to ``get_slice`` but uses column name.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L563>`__



.. code-block:: ocaml

  val head : int -> t -> t

``head n x`` returns top ``n`` rows of ``x``.

.. code-block:: ocaml

  val tail : int -> t -> t

``tail n x`` returns bottom ``n`` rows of ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L593>`__



Core operations
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val make : ?data:series array -> string array -> t

``make ~data head_names`` creates a dataframe with an array of series data
and corresponding column names. If data is not passed in, the function will
return an empty dataframe.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L216>`__



.. code-block:: ocaml

  val copy : t -> t

``copy x`` returns a copy of dataframe ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L417>`__



.. code-block:: ocaml

  val copy_struct : t -> t

``copy_struct x`` only copies the structure of ``x`` with empty series.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L431>`__



.. code-block:: ocaml

  val reset : t -> unit

``reset x`` resets the dataframe ``x`` by setting all the time series to empty.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L445>`__



.. code-block:: ocaml

  val unique : t -> string -> series

``unique x`` removes the duplicates from the dataset and only returns the
unique ones.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L620>`__



.. code-block:: ocaml

  val sort : ?inc:bool -> t -> string -> t

``sort ~inc x head`` sorts the entries in the dataframe ``x`` according to the
specified column by head name ``head``. By default, ``inc`` equals ``true``,
indicating increasing order.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L609>`__



.. code-block:: ocaml

  val min_i : t -> string -> int

``min_i x head`` returns the row index of the minimum value in the column
specified  by the ``head`` name.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L599>`__



.. code-block:: ocaml

  val max_i : t -> string -> int

``max_i x head`` returns the row index of the maximum value in the column
specified by the ``head`` name.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L604>`__



.. code-block:: ocaml

  val append_row : t -> elt array -> unit

``append_row x row`` appends a row to the dataframe ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L256>`__



.. code-block:: ocaml

  val append_col : t -> series -> string -> unit

``append_col x col`` appends a column to the dataframe ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L274>`__



.. code-block:: ocaml

  val insert_row : t -> int -> elt array -> unit

``insert_row x i row`` inserts one ``row`` with at position ``i`` into
dataframe ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L313>`__



.. code-block:: ocaml

  val insert_col : t -> int -> string -> series -> unit

``insert_col x j col_head s`` inserts series ``s`` with column head ``col_head``
at position ``j`` into dataframe ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L333>`__



.. code-block:: ocaml

  val remove_row : t -> int -> unit

``remove_row x i`` removes the ``ith`` row of ``x``. Negative index is
accepted.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L298>`__



.. code-block:: ocaml

  val remove_col : t -> int -> unit

``remove_col x i`` removes the ``ith`` column of ``x``. Negative index is
accepted.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L306>`__



.. code-block:: ocaml

  val concat_horizontal : t -> t -> t

``concat_horizontal x y`` merges two dataframes ``x`` and ``y``. Note that
``x`` and ``y`` must have the same number of rows, and each column name should
be unique.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L457>`__



.. code-block:: ocaml

  val concat_vertical : t -> t -> t

``concat_vertical x y`` concatenates two dataframes by appending ``y`` to
``x``. The two dataframes ``x`` and ``y`` must have the same number of columns
and the same column names.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L476>`__



Iteration functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val iteri_row : (int -> elt array -> unit) -> t -> unit

``iteri_row f x`` iterates the rows of ``x`` and applies ``f``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L490>`__



.. code-block:: ocaml

  val iter_row :  (elt array -> unit) -> t -> unit

``iter_row`` is simiar to ``iteri_row`` without passing in row indices.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L497>`__



.. code-block:: ocaml

  val mapi_row : (int -> elt array -> elt array) -> t -> t

``mapi_row f x`` transforms current dataframe ``x`` to a new dataframe by
applying function ``f``. Note that the returned value of ``f`` must be
consistent with ``x`` w.r.t to its length and type, otherwise runtime error
will occur.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L500>`__



.. code-block:: ocaml

  val map_row : (elt array -> elt array) -> t -> t

``map_row`` is simiar to ``mapi_row`` but without passing in row indices.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L510>`__



.. code-block:: ocaml

  val filteri_row : (int -> elt array -> bool) -> t -> t

``filteri_row`` creates a new dataframe from ``x`` by filtering out those rows
which satisfy the condition ``f``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L513>`__



.. code-block:: ocaml

  val filter_row : (elt array -> bool) -> t -> t

``filter_row`` is similar to ``filteri_row`` without passing in row indices.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L525>`__



.. code-block:: ocaml

  val filter_mapi_row : (int -> elt array -> elt array option) -> t -> t

``filter_map_row f x`` creates a new dataframe from ``x`` by applying ``f`` to
each row. If ``f`` returns ``None`` then the row is excluded in the returned
dataframe; if ``f`` returns ``Some row`` then the row is included.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L528>`__



.. code-block:: ocaml

  val filter_map_row : (elt array -> elt array option) -> t -> t

``filter_map_row`` is similar to ``filter_mapi_row`` without passing in row indices.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L542>`__



Extended indexing operators
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val ( .%( ) ) : t -> int * string -> elt

Extended indexing operator associated with ``get_by_name`` function.

.. code-block:: ocaml

  val ( .%( )<- ) : t -> int * string -> elt -> unit

Extended indexing operator associated with ``set_by_name`` function.

.. code-block:: ocaml

  val ( .?( ) ) : t -> (elt array -> bool) -> t

Extended indexing operator associated with ``filter_row`` function.

.. code-block:: ocaml

  val ( .?( )<- ) : t -> (elt array -> bool) -> (elt array -> elt array) -> t

Extended indexing operator associated with ``filter_map_row`` function.
Given a dataframe ``x``, ``f`` is used for filtering and ``g`` is used for
transforming. In other words, ``x.?(f) <- g`` means that if ``f row`` is
``true`` then ``g row`` is included in the returned dataframe.

.. code-block:: ocaml

  val ( .$( ) ) : t -> int list * string list -> t

Extended indexing operator associated with ``get_slice_by_name`` function.

IO & helper functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val of_csv : ?sep:char -> ?head:string array -> ?types:string array -> string -> t

``of_csv ~sep ~head ~types fname`` creates a dataframe by reading the data in
a CSV file with the name ``fname``. Currently, the function supports four data
types: ``b`` for boolean; ``i`` for int; ``f`` for float; ``s`` for string.

Note if ``types`` parameter is ignored, then all the elements will be parsed
as string element by default.

Parameters:
  * ``sep``: delimiter, the default one is tab.
  * ``head``: column names, if not passed in, the first line of CSV file will be used.
  * ``types``: data type of each column, must be consistent with head.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L738>`__



.. code-block:: ocaml

  val to_csv : ?sep:char -> t -> string -> unit

``to_csv ~sep x fname`` converts a dataframe to CSV file of name ``fname``. The
delimiter is specified by ``sep``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L776>`__



.. code-block:: ocaml

  val to_rows : t -> elt array array

``to_rows x`` returns an array of rows in ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L408>`__



.. code-block:: ocaml

  val to_cols : t -> series array

``to_cols x`` returns an arrays of columns in ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L405>`__



.. code-block:: ocaml

  val elt_to_str : elt -> string

``elt_to_str x`` converts element ``x`` to its string representation.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_dataframe.ml#L183>`__



