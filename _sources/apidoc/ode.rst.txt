Owl-ODE
===============================================================================

This document is auto-generated for Owl's APIs.
#6 entries have been extracted.

Github:
`{Signature} <https://github.com/ryanrhymes/owl/tree/master/src/../../owl_ode/src/ode/ode.owldoc>`_ 
`{Implementation} <https://github.com/ryanrhymes/owl/tree/master/src/../../owl_ode/src/ode/ode.ml>`_



.. code-block:: ocaml

  type tspec_t =
    | T1 of {t0: float; duration:float; dt: float}
    

The [T1] constructor allow to specify the initial
    and final integration time, in the sense that the
    solver starts with t=t0 and integrates until it
    reaches t=t0+duration, and the timestep dt. 
    This last parameter is ignored by the adaptive
    methods.

.. code-block:: ocaml

  type s
    

[s] is the type of the state (and thus also of
      the initial condition) provided to {!Owl_ode.Ode.odeint}.
      For example {!Owl.Mat.mat}.

.. code-block:: ocaml

  type t
    

[t] is type of the output of the evolution function
    [f: s-> float ->t]. For example, in the case of 
    sympletic solvers, [type s = Owl.Mat.(mat*mat)] and
    [type t = Owl.Mat.mat].

.. code-block:: ocaml

  type output
    

[output] defines the type of the output of {!Owl_ode.Ode.odeint}.
    For example, in the case of sympletc solvers,
    [type output = Owl.Mat.(mat * mat * mat)], corresponds
    to matrices that contain respectively the time,
    position, and momentum coordinates of the
    integrated solution

.. code-block:: ocaml

  val odeint : (module Types.SolverT with type output = 'a and type s = 'b and type t = 'c) -> ('b -> float -> 'c) -> 'b -> Types.tspec_t -> unit -> 'a

``odeint`` (module Solver) f y0 timespec ()`` numerically integrates
an initial value problem for a system of ODEs given an initial value:

.. math::
  \frac{dy}{dt} = f(y,t)

.. math::
  y(t_{0}) = y_{0}

Here :math:`t` is a one-dimensional independent variable (time), :math:`y(t)` is an
n-dimensional vector-valued function (state), and the n-dimensional
vector-valued function :math:`f(y, t)` determines the differential equations.

The goal is to find :math:`y(t)` approximately satisfying the differential
equations, given an initial value :math:`y(t_{0}) = y_{0}`.
The time :math:`t_{0}` is passed as part of the timespec, that includes
also the final integration time and a time step. Refer to
{!Owl_ode.Types.tspec_t} for further information.

The solver has to be passed as a first-class module and have a common
type, {!Owl_ode.Types.SolverT}. This is useful to write new custom
solvers or extend and customise the provided ones.

Refer to the documentation of the {!Owl_ode.Types.SolverT} type
for further information.

{6 Owl_ode Types}

The Types module provides some common types for 
Owl_ode ODEs integrators.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/../../owl_ode/src/ode/ode.ml#L11>`__



.. code-block:: ocaml

  val solve : ((s -> float -> t) -> s -> tspec_t -> unit -> output)

[solve f y0 tspec ()] solves the initial value problem

    .. math::
      \frac{dy}{dt} = f(y,t)

    .. math::
      y(t_{0}) = y_{0}

    with the given evolution function f, initial condition y0, and
    temporal specification tspec, and returns the desired outputs
    of type output. Several such functions have already been
    implemented in this library and can be used as reference.

