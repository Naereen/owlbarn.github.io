Low-level CBLAS API
===============================================================================

This document is auto-generated for Owl's APIs.
#23 entries have been extracted.

Github:
`{Signature} <https://github.com/ryanrhymes/owl/tree/master/src/owl/cblas/owl_cblas_basic.mli>`_ 
`{Implementation} <https://github.com/ryanrhymes/owl/tree/master/src/owl/cblas/owl_cblas_basic.ml>`_



Type definition
-------------------------------------------------------------------------------



.. code-block:: ocaml

  type ('a, 'b) t = ('a, 'b, Bigarray.c_layout) Bigarray.Array1.t
    

The default type is Bigarray's ``Array1.t``.

.. code-block:: ocaml

  type cblas_layout =
    | CblasRowMajor
    | CblasColMajor 

Layout type, Row-major or Column-major.

.. code-block:: ocaml

  type cblas_transpose =
    | CblasNoTrans
    | CblasTrans
    | CblasConjTrans 

Transpose type, no transpose, transpose, or conjugate transpose.

.. code-block:: ocaml

  type cblas_uplo =
    | CblasUpper
    | CblasLower 

Upper or lower triangular matrix.

.. code-block:: ocaml

  type cblas_diag =
    | CblasNonUnit
    | CblasUnit 

Diag type, unit triangular.

.. code-block:: ocaml

  type cblas_side =
    | CblasLeft
    | CblasRight 

Side type

Level-1 BLAS: vector-vector operations
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val rotg : float -> float -> float * float * float * float

Computes the parameters for a Givens rotation.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/owl/cblas/owl_cblas_basic.ml#L67>`__



.. code-block:: ocaml

  val rot : int -> ('a, 'b) t -> int -> ('a, 'b) t -> int -> float -> float -> unit

Performs rotation of points in the plane.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/owl/cblas/owl_cblas_basic.ml#L126>`__



.. code-block:: ocaml

  val rotm : int -> ('a, 'b) t -> int -> ('a, 'b) t -> int -> ('a, 'b) t -> unit

Performs modified Givens rotation of points in the plane

`source code <https://github.com/ryanrhymes/owl/blob/master/src/owl/cblas/owl_cblas_basic.ml#L110>`__



.. code-block:: ocaml

  val swap : int -> ('a, 'b) t -> int -> ('a, 'b) t -> int -> unit

Swaps a vector with another vector.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/owl/cblas/owl_cblas_basic.ml#L141>`__



.. code-block:: ocaml

  val scal : int -> 'a -> ('a, 'b) t -> int -> unit

Computes the product of a vector and a scalar.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/owl/cblas/owl_cblas_basic.ml#L158>`__



.. code-block:: ocaml

  val cszd_scal : int -> float -> (Complex.t, 'a) t -> int -> unit

Computes the product of a complex vector and a float number.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/owl/cblas/owl_cblas_basic.ml#L172>`__



.. code-block:: ocaml

  val copy : int -> ('a, 'b) t -> int -> ('a, 'b) t -> int -> unit

Copies vector to another vector.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/owl/cblas/owl_cblas_basic.ml#L185>`__



.. code-block:: ocaml

  val axpy : int -> 'a -> ('a, 'b) t -> int -> ('a, 'b) t -> int -> unit

Computes a vector-scalar product and adds the result to a vector.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/owl/cblas/owl_cblas_basic.ml#L202>`__



.. code-block:: ocaml

  val dot : ?conj:bool -> int -> ('a, 'b) t -> int -> ('a, 'b) t -> int -> 'a

Computes a vector-vector dot product. [conj] is for complex numbers, [true]
  indicates conjugated, [false] indicates unconjugated.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/owl/cblas/owl_cblas_basic.ml#L221>`__



.. code-block:: ocaml

  val dsdot : int -> (float, float32_elt) t -> int -> (float, float32_elt) t -> int -> float

Computes a vector-vector dot product extended precision accumulation.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/owl/cblas/owl_cblas_basic.ml#L251>`__



.. code-block:: ocaml

  val nrm2 : int -> ('a, 'b) t -> int -> float

Computes the Euclidean norm of a vector.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/owl/cblas/owl_cblas_basic.ml#L259>`__



.. code-block:: ocaml

  val asum : int -> ('a, 'b) t -> int -> float

Computes the sum of magnitudes of the vector elements.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/owl/cblas/owl_cblas_basic.ml#L272>`__



.. code-block:: ocaml

  val amax : int -> ('a, 'b) t -> int -> int

Finds the index of the element with maximum absolute value.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/owl/cblas/owl_cblas_basic.ml#L285>`__



Level-2 BLAS: matrix-vector operations
-------------------------------------------------------------------------------



Level-3 BLAS: matrix-matrix operations
-------------------------------------------------------------------------------



