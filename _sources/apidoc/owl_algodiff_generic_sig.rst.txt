Algodiff.Generic Functor
===============================================================================

This document is auto-generated for Owl's APIs.
#23 entries have been extracted.

Github:
`{Signature} <https://github.com/ryanrhymes/owl/tree/master/src/base/algodiff/owl_algodiff_generic_sig.ml>`_ 
`{Implementation} <https://github.com/ryanrhymes/owl/tree/master/src/base/algodiff/owl_algodiff_generic.ml>`_



.. code-block:: ocaml

  val make_forward : t -> t -> int -> t

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L37>`__



.. code-block:: ocaml

  val make_reverse : t -> int -> t

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L39>`__



.. code-block:: ocaml

  val reverse_prop : t -> t -> unit

TODO

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L47>`__



.. code-block:: ocaml

  val diff : (t -> t) -> t -> t

``diff f x`` returns the exat derivative of a function ``f : scalar -> scalar`` at
      point ``x``. Simply calling ``diff f`` will return its derivative function ``g`` of
      the same type, i.e. ``g : scalar -> scalar``.

      Keep calling this function will give you higher-order derivatives of ``f``, i.e.
      ``f |> diff |> diff |> diff |> ...``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L57>`__



.. code-block:: ocaml

  val diff' : (t -> t) -> t -> t * t

similar to ``diff``, but return ``(f x, diff f x)``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L50>`__



.. code-block:: ocaml

  val grad : (t -> t) -> t -> t

gradient of ``f`` : (vector -> scalar) at ``x``, reverse ad.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L69>`__



.. code-block:: ocaml

  val grad' : (t -> t) -> t -> t * t

similar to ``grad``, but return ``(f x, grad f x)``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L60>`__



.. code-block:: ocaml

  val jacobian : (t -> t) -> t -> t

jacobian of ``f`` : (vector -> vector) at ``x``, both ``x`` and ``y`` are row
      vectors.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L148>`__



.. code-block:: ocaml

  val jacobian' : (t -> t) -> t -> t * t

similar to ``jacobian``, but return ``(f x, jacobian f x)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L99>`__



.. code-block:: ocaml

  val jacobianv : (t -> t) -> t -> t -> t

jacobian vector product of ``f`` : (vector -> vector) at ``x`` along ``v``, forward
      ad. Namely, it calcultes ``(jacobian x) v``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L81>`__



.. code-block:: ocaml

  val jacobianv' : (t -> t) -> t -> t -> t * t

similar to ``jacobianv'``, but return ``(f x, jacobianv f x v)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L72>`__



.. code-block:: ocaml

  val jacobianTv : (t -> t) -> t -> t -> t

transposed jacobian vector product of ``f : (vector -> vector)`` at ``x`` along
      ``v``, backward ad. Namely, it calculates ``transpose ((jacobianv f x v))``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L95>`__



.. code-block:: ocaml

  val jacobianTv' : (t -> t) -> t -> t -> t * t

similar to ``jacobianTv``, but return ``(f x, transpose (jacobianv f x v))``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L84>`__



.. code-block:: ocaml

  val hessian : (t -> t) -> t -> t

hessian of ``f`` : (scalar -> scalar) at ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L160>`__



.. code-block:: ocaml

  val hessian' : (t -> t) -> t -> t * t

simiarl to ``hessian``, but return ``(f x, hessian f x)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L163>`__



.. code-block:: ocaml

  val hessianv : (t -> t) -> t -> t -> t

hessian vector product of ``f`` : (scalar -> scalar) at ``x`` along ``v``. Namely,
      it calculates ``(hessian x) v``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L184>`__



.. code-block:: ocaml

  val hessianv' : (t -> t) -> t -> t -> t * t

similar to ``hessianv``, but return ``(f x, hessianv f x v)``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L178>`__



.. code-block:: ocaml

  val laplacian : (t -> t) -> t -> t

laplacian of ``f : (scalar -> scalar)`` at ``x``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L190>`__



.. code-block:: ocaml

  val laplacian' : (t -> t) -> t -> t * t

simiar to ``laplacian``, but return ``(f x, laplacian f x)``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L191>`__



.. code-block:: ocaml

  val gradhessian : (t -> t) -> t -> t * t

return ``(grad f x, hessian f x)``, ``f : (scalar -> scalar)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L151>`__



.. code-block:: ocaml

  val gradhessian' : (t -> t) -> t -> t * t * t

return ``(f x, grad f x, hessian f x)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L154>`__



.. code-block:: ocaml

  val gradhessianv : (t -> t) -> t -> t -> t * t

return ``(grad f x v, hessian f x v)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L172>`__



.. code-block:: ocaml

  val gradhessianv' : (t -> t) -> t -> t -> t * t * t

return ``(f x, grad f x v, hessian f x v)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/algodiff/owl_algodiff_generic.ml#L166>`__



