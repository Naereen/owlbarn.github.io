Exception
===============================================================================

This document is auto-generated for Owl's APIs.
#28 entries have been extracted.

Github:
`{Signature} <https://github.com/ryanrhymes/owl/tree/master/src/base/core/owl_exception.mli>`_ 
`{Implementation} <https://github.com/ryanrhymes/owl/tree/master/src/base/core/owl_exception.ml>`_



Core function
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val check : bool -> exn -> unit

``check p e`` raises the exception ``e`` if the predicate ``p`` is
``false``, otherwise returns ``unit``.

Parameters:
  * ``p``: predicate to check.
  * ``e``: exception to raise.

Returns:
  * ``unit``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_exception.ml#L56>`__



.. code-block:: ocaml

  val verify : bool -> (unit -> exn) -> unit

``verify p f`` calls the function ``f`` which further raises an exception
if the predicate ``p`` is ``false``, otherwise returns ``unit``.

Parameters:
  * ``p``: predicate to check.
  * ``f``: function to raise the exception.

Returns:
  * ``unit``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_exception.ml#L60>`__



.. code-block:: ocaml

  val to_string : exn -> string

``to_string e`` converts an exception into a string containing more
detailed information for debugging the code.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_exception.ml#L108>`__



.. code-block:: ocaml

  val pp_exception : Format.formatter -> exn -> unit [@@ocaml.toplevel_printer]

``pp_exception`` is the pretty printer for Owl exceptions.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/core/owl_exception.ml#L120>`__



Exception definition
-------------------------------------------------------------------------------



.. code-block:: ocaml

  exception CONV_INVALID_ARGUMENT
    

Input arugments of convolution operations are invalid.

.. code-block:: ocaml

  exception NOT_IMPLEMENTED of string
    

Exception of not implemented yet.

.. code-block:: ocaml

  exception NOT_SUPPORTED
    

Exception of not supported type.

.. code-block:: ocaml

  exception FOUND
    

Exception of found an element.

.. code-block:: ocaml

  exception NOT_FOUND
    

Exception of not found an element.

.. code-block:: ocaml

  exception EMPTY_ARRAY
    

Exception of an empty array

.. code-block:: ocaml

  exception TEST_FAIL
    

Unit Test fails.

.. code-block:: ocaml

  exception INVALID_ARGUMENT of string
    

Input arugments are invalid.

.. code-block:: ocaml

  exception INVALID_PROBABILITY of float
    

Invalide probability value, not within [0,1] range.

.. code-block:: ocaml

  exception LINALG_MATRIX_DOT_SHAPE of (int * int * int * int)
    

Invalid matrix shapes for matrix dot product.

.. code-block:: ocaml

  exception NON_NEGATIVE_INT of int
    

Fails if the input is negative.

.. code-block:: ocaml

  exception NOT_SQUARE of int array
    

Fails if a matrix is not square.

.. code-block:: ocaml

  exception NOT_MATRIX of int array
    

Fails if the input is not a matrix.

.. code-block:: ocaml

  exception DIFFERENT_SHAPE of (int array * int array)
    

Fail if two ndarrays have different shape.

.. code-block:: ocaml

  exception DIFFERENT_SIZE of (int * int)
    

Fail if two ndarrays have different size.

.. code-block:: ocaml

  exception NOT_BROADCASTABLE
    

Fail if the shapes of multiple ndarrays are not broadcastable.

.. code-block:: ocaml

  exception NOT_CONVERGE
    

Fail to converge.

.. code-block:: ocaml

  exception MAX_ITERATION
    

Number of iteration exceeds the threshold.

.. code-block:: ocaml

  exception SINGULAR
    

Exception of singular matrix.

.. code-block:: ocaml

  exception NOT_SIMPLEX
    

Exception of not being simplex.

.. code-block:: ocaml

  exception INDEX_OUT_OF_BOUND
    

Exception of index out of boundary.

.. code-block:: ocaml

  exception ZOO_ILLEGAL_GIST_NAME
    

Exception of illegal gist name.

