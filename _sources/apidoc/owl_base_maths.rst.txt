Base.Maths
===============================================================================

This document is auto-generated for Owl's APIs.
#79 entries have been extracted.

Github:
`{Signature} <https://github.com/ryanrhymes/owl/tree/master/src/base/maths/owl_base_maths.mli>`_ 
`{Implementation} <https://github.com/ryanrhymes/owl/tree/master/src/base/maths/owl_base_maths.ml>`_



Basic functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val add : float -> float -> float

``add x y``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L7>`__



.. code-block:: ocaml

  val sub : float -> float -> float

``sub x y``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L10>`__



.. code-block:: ocaml

  val mul : float -> float -> float

``mul x y``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L13>`__



.. code-block:: ocaml

  val div : float -> float -> float

``div x y``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L16>`__



.. code-block:: ocaml

  val fmod : float -> float -> float

``fmod x y``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L22>`__



.. code-block:: ocaml

  val atan2 : float -> float -> float

``atan2 x y``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L25>`__



.. code-block:: ocaml

  val hypot : float -> float -> float

``hypot x y``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L28>`__



.. code-block:: ocaml

  val abs : float -> float

``abs x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L31>`__



.. code-block:: ocaml

  val neg : float -> float

``neg x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L34>`__



.. code-block:: ocaml

  val reci : float -> float

``reci x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L37>`__



.. code-block:: ocaml

  val floor : float -> float

``floor x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L89>`__



.. code-block:: ocaml

  val ceil : float -> float

``ceil x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L92>`__



.. code-block:: ocaml

  val round : float -> float

``round x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L95>`__



.. code-block:: ocaml

  val trunc : float -> float

``trunc x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L98>`__



.. code-block:: ocaml

  val fix : float -> float

``fix x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L101>`__



.. code-block:: ocaml

  val sqr : float -> float

``sqr x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L46>`__



.. code-block:: ocaml

  val sqrt : float -> float

``sqrt x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L49>`__



.. code-block:: ocaml

  val cbrt : float -> float

``cbrt x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L52>`__



.. code-block:: ocaml

  val pow : float -> float -> float

``pow x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L19>`__



.. code-block:: ocaml

  val exp : float -> float

``exp x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L55>`__



.. code-block:: ocaml

  val exp2 : float -> float

``exp2 x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L58>`__



.. code-block:: ocaml

  val exp10 : float -> float

``exp10 x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L61>`__



.. code-block:: ocaml

  val expm1 : float -> float

``expm1 x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L64>`__



.. code-block:: ocaml

  val log : float -> float

``log x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L67>`__



.. code-block:: ocaml

  val log2 : float -> float

``log2 x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L70>`__



.. code-block:: ocaml

  val log10 : float -> float

``log10 x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L73>`__



.. code-block:: ocaml

  val log1p : float -> float

``log1p x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L76>`__



.. code-block:: ocaml

  val sigmoid : float -> float

``sigmod x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L170>`__



.. code-block:: ocaml

  val signum : float -> float

``signum x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L79>`__



.. code-block:: ocaml

  val softsign : float -> float

``softsign x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L40>`__



.. code-block:: ocaml

  val softplus : float -> float

``softplus x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L43>`__



.. code-block:: ocaml

  val relu : float -> float

``relu x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L167>`__



.. code-block:: ocaml

  val sin : float -> float

``sin x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L104>`__



.. code-block:: ocaml

  val cos : float -> float

``cos x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L107>`__



.. code-block:: ocaml

  val tan : float -> float

``tan x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L110>`__



.. code-block:: ocaml

  val cot : float -> float

``cot x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L113>`__



.. code-block:: ocaml

  val sec : float -> float

``sec x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L116>`__



.. code-block:: ocaml

  val csc : float -> float

``csc x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L119>`__



.. code-block:: ocaml

  val asin : float -> float

``asin x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L131>`__



.. code-block:: ocaml

  val acos : float -> float

``acos x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L134>`__



.. code-block:: ocaml

  val atan : float -> float

``atan x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L137>`__



.. code-block:: ocaml

  val acot : float -> float

``cot x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L140>`__



.. code-block:: ocaml

  val asec : float -> float

``sec x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L143>`__



.. code-block:: ocaml

  val acsc : float -> float

``csc x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L146>`__



.. code-block:: ocaml

  val sinh : float -> float

``sinh x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L122>`__



.. code-block:: ocaml

  val cosh : float -> float

``cosh x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L125>`__



.. code-block:: ocaml

  val tanh : float -> float

``tanh x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L128>`__



.. code-block:: ocaml

  val asinh : float -> float

``asinh x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L149>`__



.. code-block:: ocaml

  val acosh : float -> float

``acosh x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L152>`__



.. code-block:: ocaml

  val atanh : float -> float

``atanh x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L155>`__



.. code-block:: ocaml

  val acoth : float -> float

``coth x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L158>`__



.. code-block:: ocaml

  val asech : float -> float

``sech x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L161>`__



.. code-block:: ocaml

  val acsch : float -> float

``csch x``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L164>`__



.. code-block:: ocaml

  val xlogy : float -> float -> float

``xlogy(x, y)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L173>`__



.. code-block:: ocaml

  val xlog1py : float -> float -> float

``xlog1py(x, y)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L178>`__



.. code-block:: ocaml

  val logit : float -> float

``logit(x)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L183>`__



.. code-block:: ocaml

  val expit : float -> float

``expit(x)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L186>`__



.. code-block:: ocaml

  val log1mexp : float -> float

``log1mexp(x)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L189>`__



.. code-block:: ocaml

  val log1pexp : float -> float

``log1pexp(x)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L194>`__



Error functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val erf : float -> float

``erf(x)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L205>`__



.. code-block:: ocaml

  val erfc : float -> float

``erfc(x)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L221>`__



.. code-block:: ocaml

  val erfcx : float -> float

``erfcx(x)``

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L224>`__



Helper functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val is_nan : float -> bool

``is_nan x`` returns ``true`` if ``x`` is ``nan``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L229>`__



.. code-block:: ocaml

  val is_inf : float -> bool

``is_inf x`` returns ``true`` if ``x`` is ``infinity`` or ``neg_infinity``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L232>`__



.. code-block:: ocaml

  val is_normal : float -> bool

``is_normal x`` returns ``true`` if ``x`` is a normal float number.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L235>`__



.. code-block:: ocaml

  val is_subnormal : float -> bool

``is_nan x`` returns ``true`` if ``x`` is subnormal float number.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L238>`__



.. code-block:: ocaml

  val is_odd : int -> bool

``is_odd x`` returns ``true`` if ``x`` is odd.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L241>`__



.. code-block:: ocaml

  val is_even : int -> bool

``is_even x`` returns ``true`` if ``x`` is even.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L244>`__



.. code-block:: ocaml

  val is_pow2 : int -> bool

``is_pow2 x`` return ``true`` if ``x`` is integer power of 2, e.g. 32, 64, etc.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L247>`__



.. code-block:: ocaml

  val same_sign : float -> float -> bool

``same_sign x y`` returns ``true`` if ``x`` and ``y`` have the same sign,
otherwise it returns ``false``. Positive and negative zeros are special cases
and always returns ``true``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L250>`__



.. code-block:: ocaml

  val is_simplex : float array -> bool

``is_simplex x`` checks whether ``x`` is simplex. In other words,
:math:`\sum_i^K x_i = 1` and :math:`x_i \ge 0, \forall x_i \in [1,K]`.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L256>`__



.. code-block:: ocaml

  val is_sqr : int -> bool

``is_sqr x`` checks if ``x`` is the square of an integer.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L278>`__



.. code-block:: ocaml

  val mulmod : int -> int -> int -> int

``mulmod a b m`` computes (a*b) mod m.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L295>`__



.. code-block:: ocaml

  val powmod : int -> int -> int -> int

``powmod a b m`` computes (a^b) mod m.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L320>`__



.. code-block:: ocaml

  val is_prime : int -> bool

``is_prime x`` returns ``true`` if ``x`` is a prime number. The function is
deterministic for all numbers representable by an int. The function uses the
Rabin–Miller primality test.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L348>`__



.. code-block:: ocaml

  val fermat_fact : int -> int * int

``fermat_fact x`` performs Fermat factorisation over ``x``, i.e. into two
roughly equal factors. ``x`` must be an odd number.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/maths/owl_base_maths.ml#L332>`__



