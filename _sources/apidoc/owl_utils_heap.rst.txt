Utils.Heap
===============================================================================

This document is auto-generated for Owl's APIs.
#12 entries have been extracted.

Github:
`{Signature} <https://github.com/ryanrhymes/owl/tree/master/src/base/misc/owl_utils_heap.mli>`_ 
`{Implementation} <https://github.com/ryanrhymes/owl/tree/master/src/base/misc/owl_utils_heap.ml>`_



Type definition
-------------------------------------------------------------------------------



.. code-block:: ocaml

  type 'a t
    

Type of a min heap.

Basic functions
-------------------------------------------------------------------------------



.. code-block:: ocaml

  val make : ('a -> 'a -> int) -> 'a t

``make cmp`` creates an empty min heap, using ``cmp`` as a comparison function.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_heap.ml#L22>`__



.. code-block:: ocaml

  val make_int : ?initial_size:int -> (int -> int -> int) -> int t

``make_int ?initial_size cmp`` creates an empty integer heap, using ``cmp`` as a
comparison function and pre-allocates a space of ``initial_size`` elements.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_heap.ml#L28>`__



.. code-block:: ocaml

  val make_float : ?initial_size:int -> (float -> float -> int) -> float t

``make_float ?initial_size cmp`` creates an empty float heap, using ``cmp`` as a
comparison function and pre-allocates a space of ``initial_size`` elements.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_heap.ml#L34>`__



.. code-block:: ocaml

  val size : 'a t -> int

``size heap`` returns the number of elements in the heap.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_heap.ml#L45>`__



.. code-block:: ocaml

  val push : 'a t -> 'a -> unit

``push heap x`` pushes ``x`` into ``heap``. Time complexity is ``O(log(n))``,
where n is the size of ``heap``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_heap.ml#L47>`__



.. code-block:: ocaml

  val pop : 'a t -> 'a

``pop heap`` pops the minimal element from ``heap``. It raises an exception if
the heap is empty. Time complexity is ``O(log(n))``, where n is the size of
``heap``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_heap.ml#L68>`__



.. code-block:: ocaml

  val peek : 'a t -> 'a

``peek heap`` returns the value of the minimal element in ``heap`` but it does
not remove the element from the heap. Raises an exception if the heap is empty.
Time complexity is ``O(1)``.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_heap.ml#L99>`__



.. code-block:: ocaml

  val is_empty : 'a t -> bool

``is_empty heap`` returns ``true`` if ``heap`` is empty, ``false`` otherwise.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_heap.ml#L103>`__



.. code-block:: ocaml

  val to_array : 'a t -> 'a array

``to_array heap`` returns the elements in ``heap`` into an (unsorted) array.

`source code <https://github.com/ryanrhymes/owl/blob/master/src/base/misc/owl_utils_heap.ml#L105>`__



